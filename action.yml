name: action.yml autodoc
description: action.yml doc generator
author: jackton1
inputs:
  filename:
    description: 'Path to the yaml file'
    required: false
    default: action.yml
  col_max_width:
    description: 'Max width of a column'
    required: false
    default: '1000'
  col_max_words:
    description: 'Max number of words per line in a column'
    required: false
    default: '6'
  output:
    description: 'Path to the output file'
    required: false
    default: README.md
  bin_path:
    description: 'Path to the auto-doc binary'
    required: false
  input_columns:
    description: 'List of action.yml **input** columns names to display, default (display all columns)'
    required: false
  output_columns:
    description: 'List of action.yml **output** column names to display, default (display all columns)'
    required: false
  reusable_output_columns:
    description: 'List of reusable workflow **output** column names to display, default (display all columns)'
    required: false
  reusable_input_columns:
    description: 'List of reusable workflow **input** column names to display, default (display all columns)'
    required: false
  reusable_secret_columns:
    description: 'List of reusable workflow **secret** column names to display, default (display all columns)'
    required: false
  reusable:
    description: 'Boolean Indicating whether the file is a reusable workflow'
    required: false
  version:
    description: 'The version number to run'
    required: false

runs:
  using: 'composite'
  steps:
    - run: |
        EXTRA_ARGS=""
        BIN_PATH="${{ inputs.bin_path }}"
        REUSABLE="${{ inputs.reusable }}"
        VERSION="${{ inputs.version }}"
        # action.yml file
        INPUT_COLUMNS=(${{ inputs.input_columns }})
        OUTPUT_COLUMNS=(${{ inputs.output_columns }})
        # reusable workflow
        REUSABLE_SECRETS_COLUMNS=(${{ inputs.reusable_secret_columns }})
        REUSABLE_INPUTS_COLUMNS=(${{ inputs.reusable_inputs_columns }})
        REUSABLE_OUTPUTS_COLUMNS=(${{ inputs.reusable_outputs_columns }})

        if [[ ! -f "${{ inputs.filename }}" ]]; then
          echo "::warning::No file found at: ${{ inputs.filename }}"
          exit 0
        fi

        # action.yml file
        for input_column in ${INPUT_COLUMNS[@]}; do
          EXTRA_ARGS="${EXTRA_ARGS} --inputColumns ${input_column}"
        done

        for output_column in ${OUTPUT_COLUMNS[@]}; do
          EXTRA_ARGS="${EXTRA_ARGS} --outputColumns ${output_column}"
        done

        # reusable workflow
        if [[ "$REUSABLE" == "true" ]]; then
          EXTRA_ARGS="${EXTRA_ARGS} --reusable"
        fi

        for reusable_input_column in ${REUSABLE_INPUT_COLUMNS[@]}; do
          EXTRA_ARGS="${EXTRA_ARGS} --reusableInputColumns ${reusable_input_column}"
        done

        for reusable_output_column in ${REUSABLE_OUTPUT_COLUMNS[@]}; do
          EXTRA_ARGS="${EXTRA_ARGS} --reusableOutputColumns ${reusable_output_column}"
        done

        for reusable_secret_column in ${REUSABLE_SECRET_COLUMNS[@]}; do
          EXTRA_ARGS="${EXTRA_ARGS} --reusableSecretColumns ${reusable_secret_column}"
        done
        
        if [[ -z "$VERSION" ]]; then
          VERSION=v2.0.1
        fi

        if [[ -z "$BIN_PATH" ]]; then
          LATEST_VERSION=$VERSION
          echo "Downloading auto-doc $LATEST_VERSION binary..."

          # Download the latest version
          WINDOWS_TARGET=Windows_x86_64
          LINUX_TARGET=Linux_x86_64
          MACOS_TARGET=Darwin_x86_64
          ARCHIVE=zip
          TEMP_DIR=$(mktemp -d)

          if [[ $(uname -s) == "Linux" ]]; then
            TARGET=$LINUX_TARGET
            ARCHIVE=tar.gz
          elif [[ $(uname -s) == "Darwin" ]]; then
            TARGET=$MACOS_TARGET
            ARCHIVE=tar.gz
          else
            TARGET=$WINDOWS_TARGET
          fi
        
          DELAY=10
          OUTPUT_FILE="$TEMP_DIR"/auto-doc."$ARCHIVE"
        
          for i in $(seq 1 5); do
            curl --connect-timeout 300 -sLf https://github.com/tj-actions/auto-doc/releases/download/"$LATEST_VERSION"/auto-doc_"${LATEST_VERSION/v/}"_"$TARGET"."$ARCHIVE" -o "$OUTPUT_FILE" && break
            sleep $DELAY
            echo "$i retries"
          done
        
          if [[ "$ARCHIVE" == "zip" ]]; then
            unzip -q "$OUTPUT_FILE" -d "$TEMP_DIR"
          else
            tar -xzf "$OUTPUT_FILE" -C "$TEMP_DIR"
          fi

          chmod +x "$TEMP_DIR"/auto-doc

          BIN_PATH="$TEMP_DIR/auto-doc"
        fi

        echo "::debug::Generating documentation using ${BIN_PATH}..."
        echo "::debug::Extra args: ${EXTRA_ARGS}"
        
        $BIN_PATH --filename="${{ inputs.filename }}" --output="${{ inputs.output }}" \
          --colMaxWidth="${{ inputs.col_max_width }}" --colMaxWords="${{ inputs.col_max_words }}" \
          ${EXTRA_ARGS} && exit_status=$? || exit_status=$?

        rm -f $BIN_PATH
        
        if [[ $exit_status -ne 0 ]]; then
          echo "::warning::Error occurred running auto-doc"
          exit $exit_status;
        fi
      shell: bash

branding:
  icon: file-text
  color: white
